{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kksar\\\\Downloads\\\\ramp-fe-challenge\\\\src\\\\components\\\\Transactions\\\\TransactionPane.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { InputCheckbox } from \"../InputCheckbox\";\nimport mockData from \"../../mock-data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionPane = _ref => {\n  _s();\n\n  let {\n    transaction,\n    loading\n  } = _ref;\n  const [approved, setApproved] = useState(transaction.approved);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"RampPane\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampPane--content\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText\",\n        children: [transaction.merchant, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n        children: moneyFormatter.format(transaction.amount)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"RampText--hushed RampText--s\",\n        children: [transaction.employee.firstName, \" \", transaction.employee.lastName, \" - \", transaction.date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputCheckbox, {\n      id: transaction.id,\n      checked: approved,\n      disabled: loading,\n      onChange: async newValue => {\n        const updatedTransactionIndex = mockData.transactions.findIndex(t => t.id === transaction.id);\n\n        if (updatedTransactionIndex !== -1) {\n          mockData.transactions[updatedTransactionIndex].approved = newValue;\n          setApproved(newValue);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransactionPane, \"KPAjtgwy0mvFAelnTZhq541SWIA=\");\n\n_c = TransactionPane;\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\"\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionPane\");","map":{"version":3,"names":["useState","InputCheckbox","mockData","TransactionPane","transaction","loading","approved","setApproved","merchant","moneyFormatter","format","amount","employee","firstName","lastName","date","id","newValue","updatedTransactionIndex","transactions","findIndex","t","Intl","NumberFormat","style","currency"],"sources":["C:/Users/kksar/Downloads/ramp-fe-challenge/src/components/Transactions/TransactionPane.tsx"],"sourcesContent":["import { useState } from \"react\"\nimport { InputCheckbox } from \"../InputCheckbox\"\nimport { TransactionPaneComponent } from \"./types\"\nimport { setTransactionApproval } from \"src/utils/requests\"\nimport mockData from \"../../mock-data.json\"\nexport const TransactionPane: TransactionPaneComponent = ({\n  transaction,\n  loading\n}) => {\n  const [approved, setApproved] = useState(transaction.approved)\n\n  return (\n    <div className=\"RampPane\">\n      <div className=\"RampPane--content\">\n        <p className=\"RampText\">{transaction.merchant} </p>\n        <b>{moneyFormatter.format(transaction.amount)}</b>\n        <p className=\"RampText--hushed RampText--s\">\n          {transaction.employee.firstName} {transaction.employee.lastName} - {transaction.date}\n        </p>\n      </div>\n      <InputCheckbox\n        id={transaction.id}\n        checked={approved}\n        disabled={loading}\n        onChange={async (newValue) => {\n          const updatedTransactionIndex = mockData.transactions.findIndex(\n            (t) => t.id === transaction.id\n          )\n          if (updatedTransactionIndex !== -1) {\n            mockData.transactions[updatedTransactionIndex].approved = newValue\n            setApproved(newValue)\n          }\n        }}\n      />\n    </div>\n  )\n}\n\nconst moneyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n})\n"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAGA,OAAOC,QAAP,MAAqB,sBAArB;;AACA,OAAO,MAAMC,eAAyC,GAAG,QAGnD;EAAA;;EAAA,IAHoD;IACxDC,WADwD;IAExDC;EAFwD,CAGpD;EACJ,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAACI,WAAW,CAACE,QAAb,CAAxC;EAEA,oBACE;IAAK,SAAS,EAAC,UAAf;IAAA,wBACE;MAAK,SAAS,EAAC,mBAAf;MAAA,wBACE;QAAG,SAAS,EAAC,UAAb;QAAA,WAAyBF,WAAW,CAACI,QAArC;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA,UAAIC,cAAc,CAACC,MAAf,CAAsBN,WAAW,CAACO,MAAlC;MAAJ;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE;QAAG,SAAS,EAAC,8BAAb;QAAA,WACGP,WAAW,CAACQ,QAAZ,CAAqBC,SADxB,OACoCT,WAAW,CAACQ,QAAZ,CAAqBE,QADzD,SACsEV,WAAW,CAACW,IADlF;MAAA;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAQE,QAAC,aAAD;MACE,EAAE,EAAEX,WAAW,CAACY,EADlB;MAEE,OAAO,EAAEV,QAFX;MAGE,QAAQ,EAAED,OAHZ;MAIE,QAAQ,EAAE,MAAOY,QAAP,IAAoB;QAC5B,MAAMC,uBAAuB,GAAGhB,QAAQ,CAACiB,YAAT,CAAsBC,SAAtB,CAC7BC,CAAD,IAAOA,CAAC,CAACL,EAAF,KAASZ,WAAW,CAACY,EADE,CAAhC;;QAGA,IAAIE,uBAAuB,KAAK,CAAC,CAAjC,EAAoC;UAClChB,QAAQ,CAACiB,YAAT,CAAsBD,uBAAtB,EAA+CZ,QAA/C,GAA0DW,QAA1D;UACAV,WAAW,CAACU,QAAD,CAAX;QACD;MACF;IAZH;MAAA;MAAA;MAAA;IAAA,QARF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAyBD,CA/BM;;GAAMd,e;;KAAAA,e;AAiCb,MAAMM,cAAc,GAAG,IAAIa,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EACpDC,KAAK,EAAE,UAD6C;EAEpDC,QAAQ,EAAE;AAF0C,CAA/B,CAAvB"},"metadata":{},"sourceType":"module"}